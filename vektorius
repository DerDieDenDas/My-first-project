/*
#include "mylib.h"

struct studentas {
    string vardas, pavarde;
    vector<float> paz;
    int egz;
    float gal_vid, gal_med;
};

const float WEIGHT_PAZ = 0.4;
const float WEIGHT_EGZ = 0.6;
*/

#include "mylib.h"

struct studentas{
    string vardas, pavarde;
    vector<float> paz;
    int egz;
    float gal_vid, gal_med;
};

/*
void balas(studentas &temp){
    //vidurkis
    float vid = 0;
    int size = temp.paz.size();
    for (float &i:temp.paz) vid+=i;
    vid/=size;
    temp.gal_vid = 0.4*vid + 0.6*temp.egz; //mediana
    
  //bubble sort
    for ( int i=0; i < size-1 ; i++ ){
        for ( int j=0 ; j < size-i-1 ; j++){
            if (temp.paz[j]>temp.paz[j+1]){
                swap(temp.paz[j], temp.paz[j+1]);
            }
        }
    }
    int vidurys=size/2;
    float mediana = size % 2 == 0 ? (temp.paz[vidurys-1] + temp.paz[vidurys]) / 2.0 : temp.paz[vidurys];
    temp.gal_med = 0.4*mediana + 0.6*temp.egz;
}
*/

void balas(studentas& temp) {
    //vidurkis
    float vid = accumulate(temp.paz.begin(), temp.paz.end(), 0.0f) / temp.paz.size(); // Skaičiuojamas pažymių vidurkis
    temp.gal_vid = 0.4f * vid + 0.6f * temp.egz; // Skaičiuojamas galutinis įvertinimas pagal vidurkį

    //mediana
    int size = temp.paz.size();
    sort(temp.paz.begin(), temp.paz.end()); // Rūšiuojami pažymiai didėjimo tvarka
    float mediana;
    if (size % 2 == 0) {
        mediana = (temp.paz[size / 2 - 1] + temp.paz[size / 2]) / 2.0f; // Skaičiuojama mediana, jei pažymių skaičius lyginis
    }
    else {
        mediana = temp.paz[size / 2]; // Skaičiuojama mediana, jei pažymių skaičius nelyginis
    }
    temp.gal_med = 0.4f * mediana + 0.6f * temp.egz; // Skaičiuojamas galutinis įvertinimas pagal medianą
}

void pild(studentas &temp){
    char uzklausa = 'n';
    cout << "Įveskite vardą: ";
    cin >> temp.vardas; // Įvedamas studento vardas
    cout << "Įveskite pavardę: ";
    cin >> temp.pavarde; // Įvedama studento pavardė
    cout << "Įveskite pažymius. Baigę įvedimą, spauskite bet kokią raidę: ";
  
    float x;
    while (cin >> x){
       temp.paz.push_back(x); // Įvestas pažymys pridedamas prie pažymių vektoriaus
    }
    cin.clear();
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(),'\n'); // Išvaloma įvesties srautas

    cout << "Įveskite egzamino pažymį: ";
    do { // Draudžiama įvesti raides
        cin >> temp.egz; // Įvedamas egzamino pažymys
        cin.clear();
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(),'\n'); // Išvaloma įvesties srautas
    } while (temp.egz==0);
  
    cout << "Ar norite atsitiktinių balo rezultatų? y/n ";
    cin >> uzklausa;
    if (uzklausa == 'y' || uzklausa == 'Y') {
        srand(time(NULL));
        temp.gal_vid = (float)rand()/RAND_MAX*10; // Sugeneruojamas atsitiktinis galutinis įvertinimas pagal vidurkį
        temp.gal_med = (float)rand()/RAND_MAX*10; // Sugeneruojamas atsitiktinis galutinis įvertinimas pagal medianą
    }
    else if (!temp.paz.empty()) {
        balas(temp); // Skaičiuojamas galutinis įvertinimas
    }
}

void spausd(studentas &temp){ 
    cout << setw(10) << left << temp.vardas << setw(15) << left << temp.pavarde;
    cout << setw(17) << left << setprecision(3) << fixed << temp.gal_vid << setw(3) << setprecision(3) << fixed << temp.gal_med;
    cout << endl;
}

int main(){
    vector<studentas> mas; // Sukuriamas studentų vektorius
    studentas tempas; // Sukuriamas laikinas studento objektas
    char uzklausa='n';

    do {
        pild(tempas); // Užpildomas studento objektas
        if (tempas.paz.empty()) {
            cout << "Neįvedėte jokio pažymio. Prašome iš naujo įvesti studento duomenis." << endl;
            tempas.paz.clear(); // Išvalomas pažymių vektorius
            pild(tempas); // Vartotojui leidžiama iš naujo įvesti duomenis
        }
        mas.push_back(tempas); // Pridedamas užpildytas studento objektas į vektorių
        tempas.paz.clear(); // Išvalomas pažymių vektorius prieš kitą panaudojimą
        cout << "Norėdami baigti darbą - spauskite n. Norėdami tęsti - spauskite bet kokį klavišą" << endl;
        cin >> uzklausa;
    }  while (uzklausa!='n' && uzklausa!='N');
    cout << endl << endl << setw(10) << left << "Vardas" << setw(15) << left << "Pavardė" << setw(17) << "Galutinis (Vid.) " << setw(18) << "/ Galutinis (Med.)";
    cout << endl << "------------------------------------------------------------" << endl;
    for (auto &i : mas) spausd(i); // Atspausdinami visi studentai
    cout << endl;
    for (auto &i : mas) i.paz.clear(); // Išvalomi pažymių vektoriai kiekvieno studento objekte
    mas.clear(); // Išvalomas studentų vektorius
}
