/*
#include "mylib.h"

struct studentas {
    string vardas, pavarde;
    vector<float> paz;
    int egz;
    float gal_vid, gal_med;
};

const float WEIGHT_PAZ = 0.4;
const float WEIGHT_EGZ = 0.6;

void balas(const studentas& temp) {
    //vidurkis
    float vid = 0;
    for (const auto& i : temp.paz) {
        vid += i;
    }
    float avg = vid / temp.paz.size();
    temp.gal_vid = WEIGHT_PAZ * avg + WEIGHT_EGZ * temp.egz;

    //mediana
    vector<float> sorted_paz = temp.paz;
    sort(sorted_paz.begin(), sorted_paz.end());
    int vidurys = sorted_paz.size() / 2;
    float mediana = sorted_paz.size() % 2 == 0 ? (sorted_paz[vidurys - 1] + sorted_paz[vidurys]) / 2.0 : sorted_paz[vidurys];
    temp.gal_med = WEIGHT_PAZ * mediana + WEIGHT_EGZ * temp.egz;
}

void pild(studentas& temp) {
    char uzklausa = 'n';
    cout << "Iveskite vardą: ";
    cin >> temp.vardas;
    cout << "Įveskite pavardę: ";
    cin >> temp.pavarde;
    cout << "Suveskite pažymius. Baigę įvedimą, spauskite bet kokią raidę:"
*/

#include "mylib.h"

struct studentas{
    string vardas, pavarde;
    vector<float> paz;
    int egz;
    float gal_vid, gal_med;
};

/*
void balas(studentas &temp){
    //vidurkis
    float vid = 0;
    int size = temp.paz.size();
    for (float &i:temp.paz) vid+=i;
    vid/=size;
    temp.gal_vid = 0.4*vid + 0.6*temp.egz; //mediana
    
  //bubble sort
    for ( int i=0; i < size-1 ; i++ ){
        for ( int j=0 ; j < size-i-1 ; j++){
            if (temp.paz[j]>temp.paz[j+1]){
                swap(temp.paz[j], temp.paz[j+1]);
            }
        }
    }
    int vidurys=size/2;
    float mediana = size % 2 == 0 ? (temp.paz[vidurys-1] + temp.paz[vidurys]) / 2.0 : temp.paz[vidurys];
    temp.gal_med = 0.4*mediana + 0.6*temp.egz;
}
*/

void balas(studentas& temp) {
    //vidurkis
    float vid = accumulate(temp.paz.begin(), temp.paz.end(), 0.0f) / temp.paz.size();
    temp.gal_vid = 0.4f * vid + 0.6f * temp.egz;

    //mediana
    int size = temp.paz.size();
    sort(temp.paz.begin(), temp.paz.end());
    float mediana;
    if (size % 2 == 0) {
        mediana = (temp.paz[size / 2 - 1] + temp.paz[size / 2]) / 2.0f;
    }
    else {
        mediana = temp.paz[size / 2];
    }
    temp.gal_med = 0.4f * mediana + 0.6f * temp.egz;
}

void pild(studentas &temp){
    char uzklausa = 'n';
    cout << "Įveskite vardą: ";
    cin >> temp.vardas;
    cout << "Įveskite pavardę: ";
    cin >> temp.pavarde;
    cout << "Įveskite pažymius. Baigę įveskite bet kokią raidę: ";
  
    float x;
    while (cin >> x){
       temp.paz.push_back(x);
    }
    cin.clear();
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(),'\n');
    cout << "Įveskite egzamino pažymį: ";
    do { //draudž įvesti raides
        cin >> temp.egz;
        cin.clear();
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(),'\n');
    } while (temp.egz==0);
  
    cout << "Ar norite atsitiktinių balo rezultatų? y/n ";
    cin >> uzklausa;
    if (uzklausa == 'y' || uzklausa == 'Y') {
        srand(time(NULL));
        temp.gal_vid = (float)rand()/RAND_MAX*10;
        temp.gal_med = (float)rand()/RAND_MAX*10;
    }
    else if (!temp.paz.empty()) {
        balas(temp);
    }
}

void spausd(studentas &temp){ 
    cout << setw(10) << left << temp.vardas << setw(15) << left << temp.pavarde;
    cout << setw(17) << left << setprecision(3) << fixed << temp.gal_vid << setw(3) << setprecision(3) << fixed << temp.gal_med;
    cout << endl;
}

int main(){
    vector<studentas> mas;
    studentas tempas;
    char uzklausa='n';

    do {
        pild(tempas);
        if (tempas.paz.empty()) {
            cout << "Neįvedėt jokio pažymio. Prašau iš naujo įvesti studento duomenis." << endl;
            tempas.paz.clear();
            pild(tempas);
        }
        mas.push_back(tempas);
        tempas.paz.clear();      //prieš kitą panaudojimą išvalomas vektorius 
        cout << "Norėdami baigti darbą - spauskite n. Norėdami tęsti spauskite bet kokį klavišą" << endl;
        cin >> uzklausa;
    }  while (uzklausa!='n' && uzklausa!='N');
    cout << endl << endl << setw(10) << left << "Vardas" << setw(15) << left << "Pavardė" << setw(17) << "Galutinis (Vid.) " << setw(18) << "/ Galutinis (Med.)";
    cout << endl << "------------------------------------------------------------" << endl;
    for (auto &i : mas) spausd(i);
    cout << endl;
    for (auto &i : mas) i.paz.clear();
    mas.clear();
}
