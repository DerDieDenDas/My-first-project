#include "mylib.h"

struct studentas{
    string vardas, pavarde;
    int egz;
    int* paz; // Rodiklis į pažymių masyvą
    float gal_vid, gal_med; // Galutiniai įvertinimai pagal vidurkį ir medianą
    bool random = false; // Kintamasis nurodantis, ar norima atsitiktinių balų
};

struct studentu_masyvas{
    studentas *studentas; // Rodiklis į studentų masyvą
    int dydis; // Masyvo dydis
};

void mediana_balas(studentas *tmp, int size){
    // Bubble sort rikiavimo algoritmas
    for ( int i=0; i < size-1 ; i++ ){
        for ( int j=0 ; j < size-i-1 ; j++){
            if (tmp->paz[j]>tmp->paz[j+1]){
                swap(tmp->paz[j], tmp->paz[j+1]); // Keičiami vietomis, jei pažymys didesnis
            }
        }
    }
    int vidurys=size/2; // Vidurinis indeksas
    float mediana = size % 2 == 0 ? (tmp->paz[vidurys-1] + tmp->paz[vidurys]) / 2.0 : tmp->paz[vidurys]; // Skaičiuojama mediana
    tmp->gal_med = 0.4*mediana + 0.6*tmp->egz; // Skaičiuojamas galutinis įvertinimas pagal medianą
}

void resize_int(int*& array, int size){
    int *newArray = new int[size]; // Sukuriama nauja pažymių masyvo kopija su nauju dydžiu
    for (int i=0;i<size-1;i++){
        newArray[i]=array[i]; // Naujoje kopijoje išsaugomi seni pažymiai
    }
    delete [] array; // Atlaisvinama sena pažymių masyvo atmintis
    array = newArray; // Priskiriama naujo masyvo adresas
}

void pild(studentas *tmp){
    char uzklausa = 'n';
    cout << "Įveskite vardą: ";
    cin >> tmp->vardas; // Įvedamas studento vardas
    cout << "Įveskite pavardę: ";
    cin >> tmp->pavarde; // Įvedama studento pavardė
    cout << "Įveskite pažymius. Baigę rašyti, spauskite bet kokią raidę: ";
    float x, suma=0;
    int n = 0;
    tmp->paz = NULL; // Inicializuojamas pažymių masyvo rodyklė, kadangi pradinis masyvo dydis nežinomas
    while (cin >> x){
        if (n == 0){ // Jei tai pirmasis įvestas pažymys
            tmp->paz = new int[1]; // Sukuriamas naujas pažymių masyvas su viena vieta
            tmp->paz[0] = x; // Pirmasis įvestas pažymys priskiriamas masyvui
            suma+=x; // Sumuojamas pažymys
            ++n; // Padidinamas įvestų pažymių skaitliukas
        }
        else {
            suma+=x; // Sumuojamas pažymys
            ++n; // Padidinamas įvestų pažymių skaitliukas
            resize_int(tmp->paz, n); // Padidinamas pažymių masyvas ir kopijuojami seni pažymiai
            tmp->paz[n-1] = x; // Paskutinis įvestas pažymys priskiriamas masyvui
        }
    }
    cin.clear();
    cin.ignore();

    cout << "Įveskite egzamino pažymį: ";
    do {
        cin >> tmp->egz; // Įvedamas egzamino pažymys
        cin.clear();
        cin.ignore();
    } while (tmp->egz==0);

    cout << "Ar norėtumete atsitiktinių balų? y/n ";
    cin >> uzklausa;
    if (uzklausa == 'y' || uzklausa == 'Y') {
        srand(time(NULL));
        tmp->gal_vid = (float)rand()/RAND_MAX*10; // Sugeneruojamas atsitiktinis galutinis įvertinimas pagal vidurkį
        tmp->gal_med = (float)rand()/RAND_MAX*10; // Sugeneruojamas atsitiktinis galutinis įvertinimas pagal medianą
    }
    else if (n > 0){
        tmp->gal_vid = 0.4*(suma/n) + 0.6*tmp->egz; // Skaičiuojamas galutinis įvertinimas pagal vidurkį
        mediana_balas(tmp, n); // Skaičiuojamas galutinis įvertinimas pagal medianą
    }
}

void resize(studentas*& array, int size){
    studentas *newArray = new studentas[size]; // Sukuriama nauja studentų masyvo kopija su nauju dydžiu
    for (int i=0;i<size-1;i++){
        newArray[i] = array[i]; // Naujoje kopijoje išsaugomi seni studentai
    }
    delete [] array; // Atlaisvinama sena studentų masyvo atmintis
    array = newArray; // Priskiriama naujo masyvo adresas
}

void spausd(studentas *tmp){
    cout << setw(10) << left << tmp->vardas << setw(15) << left << tmp->pavarde;
    cout << setw(17) << left << setprecision(3) << fixed << tmp->gal_vid << setw(3) << setprecision(3) << fixed << tmp->gal_med;
    cout << endl;
}

int main(){
    int max = 0; // Maksimalus studentų skaičius
    char uzklausa;
    studentu_masyvas Kursas{}; // Sukuriamas tuščias studentų masyvas

    while (uzklausa!='n' && uzklausa!='N') {
        if (max == 0){ // Jei tai pirmas kartas
            Kursas.studentas = new studentas[1]; // Sukuriamas naujas studentų masyvas su viena vieta
            Kursas.dydis = ++max; // Masyvo dydis padidinamas ir tampa 1
            pild(&Kursas.studentas[0]); // Užpildomas pirmas studentas
        }
        else { // Jei ne pirmas kartas
            ++max; // Padidinamas studentų skaitliukas
            resize(Kursas.studentas, max); // Padidinamas studentų masyvas ir kopijuojami seni studentai
            pild(&Kursas.studentas[max-1]); // Užpildoma nauja studento vieta
        }
        if (Kursas.studentas[max-1].paz == NULL) { // Jei nepavyko įvesti pažymių
            cout << "Klaida. Pabandykite iš naujo įvesti studento duomenis." << endl;
            pild(&Kursas.studentas[max-1]); // Vartotojui leidžiama iš naujo įvesti duomenis
        }
        Kursas.dydis = max; // Atnaujinamas masyvo dydis
        cout << "Norint baigti duomenų suvedimą spauskite n. Norėdami suvesti kito studento duomenis - spauskite bet kokį kitą klavišą" << endl;
        cin >> uzklausa;
    }

    cout << endl << endl << setw(10) << left << "Vardas" << setw(15) << left << "Pavardė" << setw(17) << "Galutinis (Vid.) " << setw(18) << "/ Galutinis (Med.)";
    cout << endl << "------------------------------------------------------------" << endl;
    for (int i=0;i<Kursas.dydis;i++) {
        spausd(&Kursas.studentas[i]); // Atspausdinami visi studentai
        delete [] Kursas.studentas[i].paz; // Atlaisvinama atmintis, kurioje saugomi studento pažymiai
    }
    cout << endl;
    delete [] Kursas.studentas; // Atlaisvinama atmintis, kurioje saugomi studentai
}
